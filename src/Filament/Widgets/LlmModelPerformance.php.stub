<?php

namespace App\Filament\LlmMonitoring\Widgets;

use Borah\LlmMonitoring\Models\LlmCallEvaluation;
use App\Models\LlmPortCall;
use Borah\LlmMonitoring\Evaluations\BaseEvaluation;
use Filament\Support\RawJs;
use Filament\Widgets\ChartWidget;
use Filament\Widgets\Concerns\InteractsWithPageFilters;
use Flowframe\Trend\Trend;
use Flowframe\Trend\TrendValue;
use Illuminate\Database\Eloquent\Builder;

class LlmModelPerformance extends ChartWidget
{
    use InteractsWithPageFilters;

    protected static ?int $sort = 4;

    protected static ?string $heading = 'LLM Model Performance';

    protected function getData(): array
    {
        $startDate = now()->parse($this->filters['startDate'] ?? now()->subMonth());
        $endDate = now()->parse($this->filters['endDate'] ?? now());

        // Get average answer relevance scores by model
        $datasets = [];
        $evaluations = collect(config('llm-monitoring.evaluations'))->map(fn (string $e) => new $e);
        $labels = $evaluations->map(fn (BaseEvaluation $evaluation) => str(class_basename($evaluation))->snake()->title()->replace('_', ' '))->toArray();

        $rawLabels = [];
        // some nice pastel colors
        $colors = [
            '#FFB6C1',
            '#87CEEB',
            '#98FB98',
            '#DDA0DD',
            '#F0E68C',
        ];
        foreach ($evaluations as $i => $evaluation) {
            $data = Trend::query(
                LlmCallEvaluation::query()
                    ->whereIn('llm_port_call_id', gofioplatform()->llmPortCalls()->select('id'))
                    ->where('metric', $evaluation->identifier())
            )
                ->between($startDate, $endDate)
                ->perDay()
                ->average('value');

            $rawLabels = $data->map(fn (TrendValue $value) => $value->date);
            $datasets[] = [
                'label' => $labels[$i],
                'data' => $data->map(fn (TrendValue $value) => $value->aggregate),
                'backgroundColor' => $colors[$i % count($colors)],
                'borderColor' => $colors[$i % count($colors)],
            ];
        }

        return [
            'datasets' => $datasets,
            'labels' => $rawLabels,
        ];
    }

    protected function getOptions(): array|RawJs|null
    {
        return [
            'scales' => [
                'y' => [
                    'min' => 0,
                    'max' => 1,
                    'ticks' => [
                        'callback' => '(value) => (value * 100).toFixed(2) + "%"',
                    ],
                ],
            ],
        ];
    }

    protected function getType(): string
    {
        return 'bar';
    }
}
