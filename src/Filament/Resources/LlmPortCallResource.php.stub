<?php

namespace {namespace}\Resources;

use {namespace}\Resources\LlmPortCallResource\Pages;
use {namespace}\Resources\LlmPortCallResource\RelationManagers;
use App\Models\LlmPortCall;
use Filament\Infolists;
use Filament\Infolists\Infolist;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Str;

class LlmPortCallResource extends Resource
{
    protected static ?string $model = LlmPortCall::class;

    protected static ?string $navigationIcon = 'heroicon-o-pencil';

    protected static ?string $navigationGroup = 'LLM Monitoring';

    public static function infolist(Infolist $infolist): Infolist
    {
        return $infolist
            ->schema([
                Infolists\Components\TextEntry::make('created_at')
                    ->dateTime(),
                Infolists\Components\TextEntry::make('driver'),
                Infolists\Components\TextEntry::make('model_name'),
                Infolists\Components\TextEntry::make('temperature')
                    ->placeholder('Not provided'),
                Infolists\Components\TextEntry::make('top_p')
                    ->placeholder('Not provided'),
                Infolists\Components\TextEntry::make('frequency_penalty')
                    ->placeholder('Not provided'),
                Infolists\Components\TextEntry::make('finish_reason'),
                Infolists\Components\TextEntry::make('processing_time_in_ms')
                    ->suffix('ms'),
                Infolists\Components\TextEntry::make('input_tokens')
                    ->placeholder('Unknown'),
                Infolists\Components\TextEntry::make('output_tokens')
                    ->placeholder('Unknown'),
                Infolists\Components\TextEntry::make('response')
                    ->formatStateUsing(function ($state) {
                        return Str::markdown(nl2br(htmlentities($state)));
                    })
                    ->html(),
                Infolists\Components\RepeatableEntry::make('messages')
                    ->label('Messages')
                    ->schema([
                        Infolists\Components\TextEntry::make('role')
                            ->color(fn ($state) => match ($state) {
                                'user' => 'info',
                                'system' => 'gray',
                                default => null,
                            })
                            ->badge(),
                        Infolists\Components\TextEntry::make('content')
                            ->formatStateUsing(function ($state) {
                                return nl2br(htmlentities($state));
                            })
                            ->html(),
                    ])
                    ->columnSpanFull(),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('created_at')
                    ->dateTime()
                    ->sortable(),
                Tables\Columns\TextColumn::make('driver')
                    ->searchable(isGlobal: false, isIndividual: true),
                Tables\Columns\TextColumn::make('model_name')
                    ->searchable(isGlobal: false, isIndividual: true),
                Tables\Columns\TextColumn::make('finish_reason'),
                Tables\Columns\TextColumn::make('processing_time_in_ms')
                    ->label('Processing Time')
                    ->suffix('ms')
                    ->sortable(),
                Tables\Columns\TextColumn::make('input_tokens')
                    ->sortable(),
                Tables\Columns\TextColumn::make('output_tokens')
                    ->sortable(),
            ])
            ->filters([

            ])
            ->actions([
                Tables\Actions\ViewAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->defaultSort('created_at', 'desc');
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ManageLlmPortCalls::route('/'),
        ];
    }
}
